openapi: 3.0.0
info:
  title: CyberSec Command API
  version: 1.0.0
  description: API for managing cameras, streams, and recordings for the CyberSec dashboard.
servers:
  - url: http://127.0.0.1:5000/api
    description: Development server

components:
  schemas:
    CameraSettings:
      type: object
      properties:
        brightness:
          type: integer
          default: 100
        contrast:
          type: integer
          default: 100
        isNightVision:
          type: boolean
          default: false
        resolution:
          type: string
          enum: [1080p, 720p, 480p]
        fps:
          type: integer
        bitrate:
          type: integer
        codec:
          type: string
          enum: [H.264, H.265]
        ptz:
          type: object
          properties:
            enabled:
              type: boolean
            presets:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  value:
                    type: string
        motionDetection:
          type: object
          properties:
            enabled:
              type: boolean
            sensitivity:
              type: integer
        recording:
          type: object
          properties:
            mode:
              type: string
              enum: [continuous, motion, schedule, off]
            retentionDays:
              type: integer

    Camera:
      type: object
      properties:
        id:
          type: string
          example: 60d0fe4f5311236168a109ca
        name:
          type: string
          example: Lobby Entrance
        type:
          type: string
          enum: [IP, USB, Android]
        url:
          type: string
          example: "https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8"
        status:
          type: string
          enum: [ONLINE, OFFLINE, RECORDING]
        ping:
          type: integer
        signal:
          type: integer
        lastSeen:
          type: string
          format: date-time
        isFavorite:
          type: boolean
        location:
          type: string
        tags:
          type: array
          items:
            type: string
        settings:
          $ref: '#/components/schemas/CameraSettings'
          
    Task:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cb
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        ownerId:
          type: string
          description: ID of the user who owns the task
        meta:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    Error:
      type: object
      properties:
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [] # Apply bearer auth globally to all endpoints by default

paths:
  /cameras:
    get:
      summary: Get all cameras
      tags: [Cameras]
      responses:
        '200':
          description: A list of cameras
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Camera'
    post:
      summary: Create a new camera
      tags: [Cameras]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, url]
              properties:
                name:
                  type: string
                url:
                  type: string
                type:
                  type: string
                  enum: [IP, USB, Android]
      responses:
        '201':
          description: Camera created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        '400':
          description: Invalid input

  /cameras/{id}:
    get:
      summary: Get a camera by ID
      tags: [Cameras]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Camera details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        '404':
          description: Camera not found
    delete:
      summary: Delete a camera
      tags: [Cameras]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Camera deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /cameras/{id}/control:
    post:
      summary: Update camera settings
      tags: [Cameras]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                settings:
                  $ref: '#/components/schemas/CameraSettings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        '404':
          description: Camera not found

  /cameras/{id}/record:
    post:
      summary: Start or stop recording for a camera
      tags: [Cameras]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [record]
              properties:
                record:
                  type: boolean
                  description: "true to start recording, false to stop"
      responses:
        '200':
          description: Recording status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        '400':
          description: Camera is offline
        '404':
          description: Camera not found

  /cameras/{id}/favorite:
    post:
      summary: Toggle favorite status for a camera
      tags: [Cameras]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [isFavorite]
              properties:
                isFavorite:
                  type: boolean
                  description: "The new favorite status"
      responses:
        '200':
          description: Favorite status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        '404':
          description: Camera not found
          
  /tasks:
    get:
      summary: List tasks
      tags: [Tasks]
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, running, completed, failed]
        - in: query
          name: ownerId
          schema:
            type: string
          description: (Admin only) Filter by owner ID
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '401':
          description: Unauthorized
    post:
      summary: Create a new task
      tags: [Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title:
                  type: string
                description:
                  type: string
                meta:
                  type: object
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /tasks/{id}:
    get:
      summary: Get a task by ID
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Task not found
    patch:
      summary: Update a task
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [pending, running, completed, failed]
                meta:
                  type: object
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Task not found
    delete:
      summary: Delete a task
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Task not found