
openapi: 3.0.0
info:
  title: Task Manager API
  version: 1.0.0
  description: A simple API for managing tasks and users.
servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109ca
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
    Task:
      type: object
      required:
        - title
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cb
        user:
          type: string
          description: The ID of the user who owns the task.
        title:
          type: string
          example: "Buy groceries"
        description:
          type: string
          example: "Milk, Bread, Cheese"
        status:
          type: string
          enum: [pending, in-progress, completed]
          default: pending
        dueDate:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users/register:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      token:
                        type: string
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      summary: Authenticate a user and get a token
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      token:
                        type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks:
    get:
      summary: Get all tasks for the authenticated user
      tags: [Tasks]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: Not authorized
    post:
      summary: Create a new task
      tags: [Tasks]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [pending, in-progress, completed]
                dueDate:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
        '401':
          description: Not authorized

  /tasks/{id}:
    get:
      summary: Get a specific task by ID
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Not authorized
        '404':
          description: Task not found
    put:
      summary: Update a task
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [pending, in-progress, completed]
                dueDate:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Not authorized
        '404':
          description: Task not found
    delete:
      summary: Delete a task
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Not authorized
        '404':
          description: Task not found
